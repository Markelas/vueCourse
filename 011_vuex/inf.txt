Vuex
•Во Vue есть обычный механизм, который может передавать данные от родителя к ребёнку какие-либо props, когда, например, передаем с помощью
директивы v-bind передаём какие-либо значения. У такого подхода могут быть проблемы, когда создаётся цепочка из вложенных компонентов и хотим
передать из 1 компонента к 4, нужно через каждый компонент нужно передавать данные. Но есть provide и inject, чтобы удобно было передавать
Vuex решает проблемы на более масштабных проектах, для передачи данных
Она помогает вынести данные, логику работы с ними вынести в отдельные файлы, контейнер 

•Для начала создаем store.js, импортируем import { createStore } from "vuex" и экспортируем по дефолту, export default createStore, затем
внутри функции state() создаём нужные нам значения, объявляем глобально в main.js, вместе с .use(store), затем просто обращаемся в компоненте $store.state.переменная
При изменении этой переменной, она сразу везде меняется. Пример использования, сообщения отображаются в ВК и слева на странице и сверху, изменяются они динамически вместе

•mutations: { increment(state) { state.counter++ } } Описываем, какие мутации совершаем, например, чтобы не писать длинную строчку this.$store.state.counter++, можем здесь описать это действие
•Далее, в самом компоненте просто обращаемся, с помощью метода commit, к this.$store.commit() к созданному методу, который описали в store.js

•Также мы можем в созданную мутацию передавать значения из компонента, с помощью payload, туда можно передавать и объекты, например, в store.js в методе можем обращаться к payload.ключ, чтобы получить
данные с объекта
•Правило мутации, что действие должно сработать сразу, синхронные, без setTimeout, так как мы точно не можем представить, что будет с нашим state

•Также в store.js мы можем использовать getters:{}, изменяя там какие-либо данные, не изменяя при этом их напрямую в state и затем выводить их в шаблоне

•Чтобы работать с асихронным кодом, мы его вызываем actions: {} и через какое-то время он используется, чтобы вызвать мутацию

•mappers (Вызываются import { mapGetters, mapMutations } from "vuex"), чтобы брать значения, например, в computed ...mapGetters(["counter"]), или в methods ...mapMutations(["add"]),
Их можно использовать для оптимизации, чтобы несколько раз не писать обращение, например, к getters, $store.getters.doubleCounter, можем просто с помощью ...mapGetters(["counter"]) разложить getters


Так как становится много кода, в store.js, можно разделить его на модули. Создана папка store и переименовали файл в index.js, можно создавать новые файлы для каждого свойства

• namespaced - 